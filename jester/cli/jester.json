{
    "options": {
        "runtime.db.intids": true
    },
    "rules": [
        // If J1 and J2 have similar observed ratings, then U will rate them similarly.
        "24.63:  SIMOBSRATING(J1, J2) & RATING(U, J1) >> RATING(U, J2) ^2",

        // Ratings should concentrate around observed User/Joke averages.
        "48.52:  USER(U) & JOKE(J) & AVGUSERRATINGOBS(U) >> RATING(U, J) ^2",
        "97.55:  USER(U) & AVGJOKERATINGOBS(J) & JOKE(J) >> RATING(U, J) ^2",
        "100.0:  USER(U) & RATING(U, J) & JOKE(J) >> AVGUSERRATINGOBS(U) ^2",
        "1.727:  USER(U) & RATING(U, J) & JOKE(J) >> AVGJOKERATINGOBS(J) ^2",

        // Two-sided prior.
        "59.31:  USER(U) & RATINGPRIOR('0') & JOKE(J) >> RATING(U, J) ^2",
        "0.014:  RATING(U, J) >> RATINGPRIOR('0') ^2",

        // Negative prior.
        "0.500: ~RATING(U, J) ^2"
    ],
    "predicates": {
        "AvgJokeRatingObs/1": {
            "observations": {
                "learn": [
                    "../data/jester/0/learn/avgJokeRatingObs_obs.txt"
                ],
                "infer": [
                    "../data/jester/0/eval/avgJokeRatingObs_obs.txt"
                ]
            }
        },
        "AvgUserRatingObs/1": {
            "observations": {
                "learn": [
                    "../data/jester/0/learn/avgUserRatingObs_obs.txt"
                ],
                "infer": [
                    "../data/jester/0/eval/avgUserRatingObs_obs.txt"
                ]
            }
        },
        "Joke/1": {
            "observations": {
                "learn": [
                    "../data/jester/0/learn/joke_obs.txt"
                ],
                "infer": [
                    "../data/jester/0/eval/joke_obs.txt"
                ]
            }
        },
        "RatingPrior/1": {
            "observations": {
                "learn": [
                    "../data/jester/0/learn/ratingPrior_obs.txt"
                ],
                "infer": [
                    "../data/jester/0/eval/ratingPrior_obs.txt"
                ]
            }
        },
        "SimObsRating/2": {
            "observations": {
                "learn": [
                    "../data/jester/0/learn/simObsRating_obs.txt"
                ],
                "infer": [
                    "../data/jester/0/eval/simObsRating_obs.txt"
                ]
            }
        },
        "User/1": {
            "observations": {
                "learn": [
                    "../data/jester/0/learn/user_obs.txt"
                ],
                "infer": [
                    "../data/jester/0/eval/user_obs.txt"
                ]
            }
        },
        "Rating/2": {
            "evaluations": [
                "ContinuousEvaluator"
            ],
            "observations": {
                "learn": [
                    "../data/jester/0/learn/rating_obs.txt"
                ],
                "infer": [
                    "../data/jester/0/eval/rating_obs.txt"
                ]
            },
            "targets": {
                "learn": [
                    "../data/jester/0/learn/rating_targets.txt"
                ],
                "infer": [
                    "../data/jester/0/eval/rating_targets.txt"
                ]
            },
            "truth": {
                "learn": [
                    "../data/jester/0/learn/rating_truth.txt"
                ],
                "infer": [
                    "../data/jester/0/eval/rating_truth.txt"
                ]
            }
        }
    }
}
